/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */

#ifndef _EI_CLASSIFIER_MODEL_VARIABLES_H_
#define _EI_CLASSIFIER_MODEL_VARIABLES_H_

/**
 * @file
 *  Auto-generated complete impulse definitions. The ei_impulse_handle_t should
 *  be passed to ei_run_classifier() function to use this specific impulse.
 *  This file should only be included in ei_run_classifier.h file.
 */

#include <stdint.h>
#include "model_metadata.h"

#include "tflite-model/tflite_learn_767760_7_compiled.h"
#include "edge-impulse-sdk/classifier/ei_model_types.h"
#include "edge-impulse-sdk/classifier/inferencing_engines/engines.h"
#include "edge-impulse-sdk/classifier/postprocessing/ei_postprocessing_common.h"

const char* ei_classifier_inferencing_categories_767760_1[] = { "0", "1" };

EI_CLASSIFIER_DSP_AXES_INDEX_TYPE ei_dsp_config_767760_6_axes[] = { 0, 1, 2, 3, 4, 5, 6 };
const uint32_t ei_dsp_config_767760_6_axes_size = 7;
ei_dsp_config_raw_t ei_dsp_config_767760_6 = {
    6, // uint32_t blockId
    1, // int implementationVersion
    7, // int length of axes
    1.0f // float scale-axes
};

const float ei_dn_standard_scaler_mean_6[7] = { -5.300512718847355, 7.602367685890031, 2.598114451343886, -4.005362971899942, 1.0005291331126767, -1.4990656383118617, 2031.9382502052886 };
const float ei_dn_standard_scaler_scale_6[7] = { 3.3182118788834294, 5.01698985115835, 5.055640717488311, 2.0005300623687647, 3.3366263901825968, 1.983269238776039, 0.0008408364145595463 };
const float ei_dn_standard_scaler_var_6[7] = { 0.09082214873899531, 0.039729541674840566, 0.0391243913265174, 0.24986753707034526, 0.08982243809808936, 0.2542357665899909, 1414415.4014502054 };
ei_data_normalization_standard_scaler_config_t ei_data_normalization_standard_scaler_config_6 = {
    .mean_data = (float *)ei_dn_standard_scaler_mean_6,
    .mean_data_len = 7,
    .scale_data = (float *)ei_dn_standard_scaler_scale_6,
    .scale_data_len = 7,
    .var_data = (float *)ei_dn_standard_scaler_var_6,
    .var_data_len = 7
};
ei_data_normalization_t ei_data_normalization_config_6 = {
    (void *) &ei_data_normalization_standard_scaler_config_6, // config
    DATA_NORMALIZATION_METHOD_STANDARD_SCALER, // method
    nullptr, // context
    nullptr, // init func
    nullptr, // deinit func
    &data_normalization_standard_scaler // exec func
};

const uint8_t ei_dsp_blocks_767760_1_size = 1;
ei_model_dsp_t ei_dsp_blocks_767760_1[ei_dsp_blocks_767760_1_size] = {
    { // DSP block 6
        6,
        7, // output size
        &extract_raw_features, // DSP function pointer
        (void*)&ei_dsp_config_767760_6, // pointer to config struct
        ei_dsp_config_767760_6_axes, // array of offsets into the input stream, one for each axis
        ei_dsp_config_767760_6_axes_size, // number of axes
        1, // version
        nullptr, // factory function
        &ei_data_normalization_config_6, // data normalization config
    }
};
const ei_config_tflite_eon_graph_t ei_config_graph_767760_7 = {
    .implementation_version = 1,
    .model_init = &tflite_learn_767760_7_init,
    .model_invoke = &tflite_learn_767760_7_invoke,
    .model_reset = &tflite_learn_767760_7_reset,
    .model_input = &tflite_learn_767760_7_input,
    .model_output = &tflite_learn_767760_7_output,
};

const uint8_t ei_output_tensors_indices_767760_7[1] = { 0 };
const uint8_t ei_output_tensors_size_767760_7 = 1;
ei_learning_block_config_tflite_graph_t ei_learning_block_config_767760_7 = {
    .implementation_version = 1,
    .block_id = 7,
    .output_tensors_indices = ei_output_tensors_indices_767760_7,
    .output_tensors_size = ei_output_tensors_size_767760_7,
    .quantized = 1,
    .compiled = 1,
    .graph_config = (void*)&ei_config_graph_767760_7,
    .dequantize_output = 0,
};

const uint8_t ei_learning_blocks_767760_1_size = 1;
const uint32_t ei_learning_block_767760_7_inputs[1] = { 6 };
const uint8_t ei_learning_block_767760_7_inputs_size = 1;
const ei_learning_block_t ei_learning_blocks_767760_1[ei_learning_blocks_767760_1_size] = {
    {
        7,
        &run_nn_inference,
        (void*)&ei_learning_block_config_767760_7,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
        ei_learning_block_767760_7_inputs,
        ei_learning_block_767760_7_inputs_size,
    },
};

ei_fill_result_classification_i8_config_t ei_fill_result_classification_i8_config_767760_7 = {
    .zero_point = -128,
    .scale = 0.00390625
};

const size_t ei_postprocessing_blocks_767760_1_size = 1;
const ei_postprocessing_block_t ei_postprocessing_blocks_767760_1[ei_postprocessing_blocks_767760_1_size] = {
    {
        .block_id = 7,
        .type = EI_CLASSIFIER_MODE_CLASSIFICATION,
        .init_fn = NULL,
        .deinit_fn = NULL,
        .postprocess_fn = &process_classification_i8,
        .display_fn = NULL,
        .config = (void*)&ei_fill_result_classification_i8_config_767760_7,
        .input_block_id = 7
    },
};

const ei_impulse_t impulse_767760_1 = {
    .project_id = 767760,
    .project_owner = "rijulnambiar",
    .project_name = "road_rangers",
    .impulse_id = 1,
    .impulse_name = "Impulse #1",
    .deploy_version = 1,

    .nn_input_frame_size = 7,
    .raw_sample_count = 1,
    .raw_samples_per_frame = 7,
    .dsp_input_frame_size = 1 * 7,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 1,
    .frequency = 0,

    .dsp_blocks_size = ei_dsp_blocks_767760_1_size,
    .dsp_blocks = ei_dsp_blocks_767760_1,

    .learning_blocks_size = ei_learning_blocks_767760_1_size,
    .learning_blocks = ei_learning_blocks_767760_1,

    .postprocessing_blocks_size = ei_postprocessing_blocks_767760_1_size,
    .postprocessing_blocks = ei_postprocessing_blocks_767760_1,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .sensor = EI_CLASSIFIER_SENSOR_FUSION,
    .fusion_string = "Ax + Ay + Az + Gx + Gy + Gz + Sound",
    .slice_size = (1/4),
    .slices_per_model_window = 4,

    .has_anomaly = EI_ANOMALY_TYPE_UNKNOWN,
    .label_count = 2,
    .categories = ei_classifier_inferencing_categories_767760_1
};

ei_impulse_handle_t impulse_handle_767760_1 = ei_impulse_handle_t( &impulse_767760_1 );
ei_impulse_handle_t& ei_default_impulse = impulse_handle_767760_1;
constexpr auto& ei_classifier_inferencing_categories = ei_classifier_inferencing_categories_767760_1;
const auto ei_dsp_blocks_size = ei_dsp_blocks_767760_1_size;
ei_model_dsp_t *ei_dsp_blocks = ei_dsp_blocks_767760_1;

#endif // _EI_CLASSIFIER_MODEL_VARIABLES_H_
